#    hlg
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE RECEPTION ##########################################################

### VARIABLES DU MODULE #######################################################
# dernier message recu
set HLG_rcv_msg $APG_msg_unknown

# application emettrice du dernier message (en cas d'option --whatwho)
set HLG_rcv_app $APG_msg_unknown

# mnemonique pour le header hlg, contenant le nom de l'application qui a emis
# le message transporte.
set HLG_rcv_mnemoapp $HLG_rc_mnemoapp

# mnemonic for transporting the clock
set HLG_rcv_mnemoclk $HLG_rc_mnemoclk

# mnmenic for action
set HLG_rcv_mnemoaction $HLG_rc_mnemoaction


###############################################################################


### ZONE DU MODULE ############################################################
## zone du module reception
labelframe .rcv -pady 2 -padx 2 \
    -text "Réception \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle

label .rcv.t1 -text "Dernier message reçu de "
label .rcv.app -textvariable HLG_rcv_app -width 4 -fg $APG_int_colmsgrcv
label .rcv.t2 -text " : "
label .rcv.msg -textvariable HLG_rcv_msg -width 64  -fg $APG_int_colmsgrcv -anchor w
pack .rcv.t1 .rcv.app .rcv.t2 .rcv.msg -side left -fill y -pady 2

# affichage des sous-zones de la zone rcv
pack .rcv.msg .rcv.app -side left -fill y -pady 2
###############################################################################


### OPTIONS DE LA LIGNE DE COMMANDE ###########################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
    
    switch -- $name {
				--source {
						#--------------------------------------------------------------------------------
						# applications emettrices auxquelles il faut s'abonner
						#--------------------------------------------------------------------------------
						if { $value == "" } {
								APG_vrb_dispwarning "option $name trouvee sans argument ; ignoree"
						} else {
								APG_vrb_dispnotif "option $option trouvee, abonnement a l'app source $value"
								APG_begin_lch $value
						}
				}
    }
}
###############################################################################

### PROCEDURES DU MODULE ######################################################
#-- Procedure APG_receive_whatwho --------------------------------------------#
# Action : manage messages reception                                          #
# Remark : surcharge of LIBAPGTK                                              #
# Input : payload, sender                                                     #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc APG_receive_whatwho { what who } {
    # Updating the interface of the rcv module
    set ::HLG_rcv_msg $what
    set ::HLG_rcv_app $who
 
    # Processing depends on the sender
    switch -- $::HLG_rcv_app \
        $::APP {
	# Reception of a message sent by a remote HLG instance
	# => forward to the local base application.
	# Retrieving the name of the base application in the received message
	set app [APG_msg_splitstr what $::HLG_rcv_mnemoapp]
 
	# Retrieving the value of the clock in the received message
	set h_rcv [APG_msg_splitstr what $::HLG_rcv_mnemoclk]
 
	# Updating the clock in the lam module
	HLG_lam_update $h_rcv
 
	# Adding a debugging information in case the --debug option is used.
	APG_vrb_dispdebug "received clock: $h_rcv" "APG_receive_whatwho"
 
	# Retrieving the message which had been concatenated to the header
	# at the sending.
	# HLG_rcv_mnemoclk must be the last mnemonic of the header: it
        # determines the end of the header.
	set msg [APG_msg_endstr what $::HLG_rcv_mnemoclk true]
 
	# Forwarding the message to the local base application
	HLG_snd_send $msg $app
    } \
    default {
	# Reception of a message not sent by HLG.
	# We admit that it has been sent by a local base application.
	# => forward to remote HLG intances.
 
	# Building a header containing the name of the base application.
	set header [APG_msg_createmsg $::HLG_rcv_mnemoapp $who]
 
	# Adding the current clock, after incrementing them.
	APG_msg_addmsg header $::HLG_rcv_mnemoclk [HLG_lam_incrandget]
 
	# Adding the header to the received message.
	set msg [APG_msg_concatemsg $header $what]
 
	# Call the sending procedure in module snd for forwarding the built
        # message to the remote HLG instances. The HLG_snd_send procedure
	# allows to update the interface of the snd module. 
	# Note that $::APP = "HLG".
	HLG_snd_send $msg $::APP
    }
}
